buildscript {
    dependencies {
        classpath group: 'org.jsoup', name: 'jsoup', version: System.properties.jsoupVersion
    }
}

plugins {
    id 'org.m2ci.msp.pandocreveal'
}

tasks.register('testPandoc') {
    dependsOn tasks.named('pandoc')
    doLast {
        def pandocBinary = pandoc.binary.get().asFile
        assert pandocBinary.exists()
        assert pandocBinary.canExecute()
        def output = new ByteArrayOutputStream()
        exec {
            commandLine pandocBinary, '--version'
            standardOutput = output
        }
        assert output.toString().readLines().first().split().last() == pandoc.version.get()
    }
}

tasks.register('makeAsset') {
    def destFile = file('anotherAsset.txt')
    outputs.files destFile
    doLast {
        destFile.text = 'foo'
    }
}

tasks.named('compileReveal').configure {
    markdownFile = file('slides.md')
    headerFile = file('header.yaml')
    bibFile = file('refs.bib')
    destDir = layout.buildDirectory.dir('output')
    assetFiles = fileTree('.').include('assets/**') + files(makeAsset)
}

tasks.register('testCompileReveal') {
    dependsOn tasks.named('compileReveal')
    doLast {
        def actualFile = file("$buildDir/output/index.html")
        assert actualFile.exists()
        def bibFile = file('refs.bib')
        assert bibFile.exists()
        def assetFiles = files("$buildDir/output/assets/asset.txt", "$buildDir/output/anotherAsset.txt")
        assetFiles.each {
            assert it.exists()
        }
        def expectedFile = file('expected.html')
        assert actualFile.text.contains('(foo 2017)')
    }
}

tasks.register('testDate') {
    dependsOn tasks.named('compileReveal')
    doLast {
        def htmlFile = file("$buildDir/output/index.html")
        def html = org.jsoup.Jsoup.parse(htmlFile, null)
        def actual = html.select('div.slides section').first().select('*.date').text()
        def dateLine = compileReveal.headerFile.get().asFile.readLines().find { it.startsWith 'date:' } as String
        def date = new java.text.SimpleDateFormat('yyyy-MM-dd', Locale.US).parse(dateLine.tokenize(':').last().trim())
        def expected = date.format('EEE, MMM dd, yyyy')
        assert expected == actual
    }
}

if (Boolean.parseBoolean(findProperty('tocEnabled'))) {
    def tocTitle = 'Overview'

    tasks.named('compileReveal').configure {
        tableOfContents = true
        tableOfContentsDepth = 3
        doFirst {
            File headerFile = headerFile.get().asFile
            headerFile.withWriterAppend {
                it.writeLine "toc-title: $tocTitle"
            }
        }
    }

    tasks.register('testToc') {
        dependsOn tasks.named('compileReveal')
        doLast {
            def htmlFile = layout.buildDirectory.file('output/index.html').get().asFile
            def html = org.jsoup.Jsoup.parse(htmlFile, null)
            def tocSection = html.select('section#TOC').first()
            assert tocSection
            def tocSectionTitle = tocSection.select('h2#toc-title').first().text()
            assert tocSectionTitle == tocTitle
            def tocSectionText = tocSection.text()
            assert tocSectionText == "$tocTitle Foo Bar Qux Quux"
        }
    }
} else {
    tasks.register('testToc') {
        dependsOn tasks.named('compileReveal')
        doLast {
            def htmlFile = layout.buildDirectory.file('output/index.html').get().asFile
            def html = org.jsoup.Jsoup.parse(htmlFile, null)
            def tocSection = html.select('section#TOC')
            assert tocSection == []
        }
    }
}

if (Boolean.parseBoolean(findProperty('mermaidEnabled'))) {
    tasks.named('compileReveal').configure {
        pandocFilters = ['mermaid-filter']
        pandocEnvironment = ['MERMAID_FILTER_FORMAT': 'svg']
    }

    tasks.register('testMermaid') {
        dependsOn tasks.named('compileReveal')
        doLast {
            def htmlFile = layout.buildDirectory.file('output/index.html').get().asFile
            def html = org.jsoup.Jsoup.parse(htmlFile, null)
            def mermaidSection = html.select('#qux').first()
            def mermaidContent = mermaidSection.select('p img[data-src]')
            assert mermaidContent
        }
    }
} else {
    tasks.register('testMermaid') {
        dependsOn tasks.named('compileReveal')
        doLast {
            def htmlFile = layout.buildDirectory.file('output/index.html').get().asFile
            def html = org.jsoup.Jsoup.parse(htmlFile, null)
            def mermaidSection = html.select('#qux').first()
            def mermaidContent = mermaidSection.select('pre.mermaid code').text()
            assert mermaidContent.contains('graph LR')
        }
    }
}

buildscript {
    dependencies {
        classpath group: 'org.jsoup', name: 'jsoup', version: '1.15.3'
    }
}

plugins {
    id 'org.m2ci.msp.pandocreveal'
}

import java.text.SimpleDateFormat

task makeAsset {
    def destFile = file('anotherAsset.txt')
    outputs.files destFile
    doLast {
        destFile.text = 'foo'
    }
}

compileReveal {
    markdownFile = file('slides.md')
    headerFile = file('header.yaml')
    bibFile = file('refs.bib')
    destDir = file("$buildDir/output")
    assetFiles = fileTree('.').include('assets/**') + files(makeAsset)
}

task testCompileReveal {
    dependsOn compileReveal
    doLast {
        def actualFile = file("$buildDir/output/index.html")
        assert actualFile.exists()
        def bibFile = file('refs.bib')
        assert bibFile.exists()
        def assetFiles = files("$buildDir/output/assets/asset.txt", "$buildDir/output/anotherAsset.txt")
        assetFiles.each {
            assert it.exists()
        }
        def expectedFile = file('expected.html')
        assert actualFile.text.contains('(foo 2017)')
    }
}

task testDate {
    dependsOn compileReveal
    doLast {
        def htmlFile = file("$buildDir/output/index.html")
        def html = org.jsoup.Jsoup.parse(htmlFile, null)
        def actual = html.select('div.slides section').first().select('*.date').text()
        def dateLine = compileReveal.headerFile.get().asFile.readLines().find { it.startsWith 'date:' } as String
        def date = new SimpleDateFormat('yyyy-MM-dd', Locale.US).parse(dateLine.tokenize(':').last().trim())
        def expected = date.format('EEE, MMM dd, yyyy')
        assert expected == actual
    }
}
